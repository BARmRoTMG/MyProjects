// <auto-generated />
using System;
using FlightSimulator.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlightSimulator.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230205081345_LoggerCurrentTerminal2")]
    partial class LoggerCurrentTerminal2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlightSimulator.Entities.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CurrentTerminalId")
                        .HasColumnType("int")
                        .HasColumnName("CurrentTerminalId");

                    b.Property<string>("FlightCompany")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FlightTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PassengersCount")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentTerminalId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("FlightSimulator.Entities.Logger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CurrentTerminal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EnterToTerminal")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExitFromTerminal")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Logger");
                });

            modelBuilder.Entity("FlightSimulator.Entities.Terminal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<int>("TerminalNumber")
                        .HasColumnType("int");

                    b.Property<int>("WaitTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Terminals");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Terminal");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FlightSimulator.Entities.Terminal_2", b =>
                {
                    b.HasBaseType("FlightSimulator.Entities.Terminal");

                    b.ToTable("Terminals");

                    b.HasDiscriminator().HasValue("Terminal_2");
                });

            modelBuilder.Entity("FlightSimulator.Entities.Terminal_3", b =>
                {
                    b.HasBaseType("FlightSimulator.Entities.Terminal");

                    b.ToTable("Terminals");

                    b.HasDiscriminator().HasValue("Terminal_3");
                });

            modelBuilder.Entity("FlightSimulator.Entities.Terminal_4", b =>
                {
                    b.HasBaseType("FlightSimulator.Entities.Terminal");

                    b.ToTable("Terminals");

                    b.HasDiscriminator().HasValue("Terminal_4");
                });

            modelBuilder.Entity("FlightSimulator.Entities.Terminal_5", b =>
                {
                    b.HasBaseType("FlightSimulator.Entities.Terminal");

                    b.ToTable("Terminals");

                    b.HasDiscriminator().HasValue("Terminal_5");
                });

            modelBuilder.Entity("FlightSimulator.Entities.Terminal_6", b =>
                {
                    b.HasBaseType("FlightSimulator.Entities.Terminal");

                    b.ToTable("Terminals");

                    b.HasDiscriminator().HasValue("Terminal_6");
                });

            modelBuilder.Entity("FlightSimulator.Entities.Terminal_7", b =>
                {
                    b.HasBaseType("FlightSimulator.Entities.Terminal");

                    b.ToTable("Terminals");

                    b.HasDiscriminator().HasValue("Terminal_7");
                });

            modelBuilder.Entity("FlightSimulator.Entities.Terminal_8", b =>
                {
                    b.HasBaseType("FlightSimulator.Entities.Terminal");

                    b.ToTable("Terminals");

                    b.HasDiscriminator().HasValue("Terminal_8");
                });

            modelBuilder.Entity("FlightSimulator.Entities.Flight", b =>
                {
                    b.HasOne("FlightSimulator.Entities.Terminal", "CurrentTerminal")
                        .WithMany()
                        .HasForeignKey("CurrentTerminalId");

                    b.Navigation("CurrentTerminal");
                });
#pragma warning restore 612, 618
        }
    }
}
